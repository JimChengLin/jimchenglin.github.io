<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿吉的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-04-14T21:20:07.697Z</updated>
  <id>/</id>
  
  <author>
    <name>Jim Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FAST 2019 DistCache</title>
    <link href="/2019/04/15/FAST-2019-DistCache/"/>
    <id>/2019/04/15/FAST-2019-DistCache/</id>
    <published>2019-04-14T18:39:05.000Z</published>
    <updated>2019-04-14T21:20:07.697Z</updated>
    
    <content type="html"><![CDATA[<p>本周我读的最佳论文是 FAST 2019 DistCache. 缓存系统就和人生一样, 有时简单的小小变动就会产生巨大的意想不到的影响. /(ㄒoㄒ)/~~</p><a id="more"></a><h2 id="DistCache-背景知识"><a href="#DistCache-背景知识" class="headerlink" title="DistCache 背景知识"></a>DistCache 背景知识</h2><ul><li><p>Balls into bins 问题</p></li><li><p>The Power of Two Random Choices</p></li><li><p>LB 与 cache</p></li></ul><p>Balls into bins 问题讲的是如果有 M 个小球随机等概率地扔进 N 个垃圾桶, 那么装球最多的那个垃圾桶大概率会有多少个球?</p><p>我第一反应就是这应该是正态分布吧. 毕竟看起来就是一连串互相独立的随机决定. 可能正态分布的 bound 还不够 tight. 出于精力的原因, 我并没有去看数学推导过程. 这里直接列出结果.</p><p>\[ O ( \log n / \log \log n ) \]</p><p>上面那个公式计算的是 load. 假设有 64 个 node, LB 随机分配流量, 那么 load 最大的 node, 负载将会是平均负载的 log 32 / log log 32 = 2.7 倍. 那为了保证 SLA, 每个节点都必须预留出 70 % 的资源空闲以应对单纯因为负载不均造成的 brust. 我已经忽略掉所有常数项了, 结果真是太糟了...</p><p>当然现实可能没这么悲观. 一些负载过高的节点可以暂时从 LB 里摘掉. 看起来解决了一个问题, 但又有了一个新问题就是现在谁来管理 LB 的状态? 据说阿里搞云梯一, 上千台的集群就经常受偏压困扰. 单点就打崩了.</p><p>解决方案出奇的简单(起码理论上是这样的), 这就引出了 The Power of Two Random Choices. LB 在分流的时候, 随机比较两台(d = 2)后端服务器的 load, 选最小.</p><p>\[ O ( \log \log n / \log d ) \]</p><p>log d 是常数, 最后得</p><p>\[ O ( \log \log n ) \]</p><p>log log 32 = 1.2, 那么只要 20% 的资源就够了(忽略常数项的情况下 :-D)? 震惊!</p><p>最后一个问题是 LB 与 cache 的互补关系. 2 choices 可以解决无状态的 load balance 问题, 但这对存储不起作用. 因为 LB 没有办法按 load 分流, 比如 key A 存在服务器上 s 上, s 跑满了, LB 就能把 query redirect 到别的机器上吗?</p><p>Small Cache, Big Effect 这篇 paper 很大程度上解决了这个问题. LB 与 cache layer 存在很强的互补关系. LB 讨厌 imbalance, 但 cache 喜欢. query 越 skew, cache 效率越高.</p><p>直觉上, 我们当然知道绝大绝大多数情况下 cache 越多, 系统性能越好(除非 network 是瓶颈), 那么在一个多 node 的系统, cache 至少要多少才有足够的信心说这个系统没有热点呢? paper 给出的答案吓死人了. 居然只要 O(n log n). n 是 node 数量!</p><p>WTF? 居然与 key 的数量无关? 那假如有一亿个 key, 4 个节点, 岂不是只要 cache 6 组 key 就够? 这太反直觉了.</p><p>但看了推导居然觉得还是很容易理解的. 作者构造了一组恶意 query 来模拟最差的情况, 然后做了些高中程度的数学消元就好了.</p><p>有几点前提是这个证明巧妙的地方, 通过定义绕过了很多很难处理的问题.</p><ul><li><p>Key 的分布必须均匀, 即使产生 skew 也只能是因为类似 Bins into balls 那种自然抖动产生的. 换言之, 如果一亿组 key, 然后九千万都在服务器 A, 起码 small cache 是救不了的... 也就是 hash function 必须得是 perfect hash.</p></li><li><p>Cache 必须未卜先知, 知道哪些 Key 是 hottest 的, 尽管实际生产上是绝对做不到的. Cache 还必须拥有无限 capacity, 多少 query 都能吸收, 这个倒是还好, cache 一般就是快得飞起.</p></li></ul><p>然后因为 key 大体分布均匀, hottest objects 必然在 cache 里, O(n log n) 实际上是限制了单个 key 的被 query 次数上限来抵消 Bins into balls 中描述的自然抖动. 所以最终可以做到无论 query 什么分布, key 有多少, O(n log n) 组 cache 就够了.</p><h2 id="DistCache"><a href="#DistCache" class="headerlink" title="DistCache"></a>DistCache</h2><p>千呼万唤始出来, 终于到了 DistCache. 其实这部分跟 small cache 那篇差不多, 不复杂, 但突出一个巧. DistCache 的作者团队(Xin Jin)在折腾一个刷分项目(玩笑, 纯属推测), 根据 small cache 的理论, 只要单点够强, 很小的 cache 就可以刷很高的分. 那 cache 足够小是不是可以直接放进专有硬件使用专有协议了? 于是他们就把 LB 和 Cache 一起打包进了 switch 里... 然后就当然刷了很高的分.</p><p>插个话, 这个体现了无序 KV 是一个很好的&quot;设计&quot;或者说品位. 上层开发者好理解, 下层开发者好刷分. 天然可拆分, 可并发. 与此相同的应该就是&quot;流&quot;这个概念了. 一个比较糟糕的例子就是 JS 的隐式 type cast. 上层开发者搞不懂, 下层开发者也不好去掉 if 来加速.</p><p>言归正传, 刷分是无止境的. 即使用了专有硬件, 专有协议, 把交换机, LB, Cache 合并了, 还是有单点. 正所谓, 单点就刷不了分. KV 是可拆分的, 那很自然的想法是, 那多来几个 cache server 就好了啊.</p><p>新问题来了, 怎么确保 cache server 是 balance 的呢? cache server 已经是刷分最快的了, 没设备给 cache server 做防止 imbalance 的 cache 了, 囧(有点绕).</p><p>作者给出的方案很巧妙也很简单, 就是双层 cache. 当前所有 cache server 的所有 KV 用一个新的 hash function 存在另一层 cache layer 里. 从数学和直觉上可以确保, 任意一层的 cache server 出现了热点, 那么这个热点的 KV 数据在另一个 cache layer 是分散的, 无热点的.</p><p>然后在哪一层 cache 找 key 的问题又可以转化为 The Power of Two Random Choices 问题 - 直接选负载最低的那一就好了. 好了, 让我们继续刷分吧!</p><h2 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h2><p>数据存储冷热分离, 大有搞头! cache 远比我想象中的高效. 热数据存储就相当于冷数据的 cache + LB 了, 冷数据打散进大规模 HDD 集群. 热存储集群保证冷存集群不会出现热点, 那么冷存集群就可以维持一个比较好的 throughput. 整体就会很快, 不是吗?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周我读的最佳论文是 FAST 2019 DistCache. 缓存系统就和人生一样, 有时简单的小小变动就会产生巨大的意想不到的影响. /(ㄒoㄒ)/~~&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cuckoo Hashing</title>
    <link href="/2019/04/07/Cuckoo-Hashing/"/>
    <id>/2019/04/07/Cuckoo-Hashing/</id>
    <published>2019-04-07T06:43:43.000Z</published>
    <updated>2019-04-14T19:07:56.955Z</updated>
    
    <content type="html"><![CDATA[<p>Hash Table 可能是最简单也性能最高的数据结构了. 但它有个问题叫做 Hash Collision(哈希碰撞). JVM 和 C++ STL 的做法是链表 Bucket, 还有个流派是 Open Addressing(开链). Cuckoo Hashing 是一种特殊的开链.</p><a id="more"></a><h2 id="链表-Bucket"><a href="#链表-Bucket" class="headerlink" title="链表 Bucket"></a>链表 Bucket</h2><p>链表 Bucket 最简单的实现就是纯单向链表, 如果 A 与 B 都 hash 到了 K, 在 K 上建立一个单链表串联 A 与 B. 由于链表的性能在元素数量少的情况下远逊 array, array 在数量多的情况下又远逊平衡树. 比较高端的实现(e.g. JVM)在 bucket size 小的时候使用 array, 数量到达一定阈值, 再全部整理成一颗平衡树.</p><p>但这种做法破坏了程序的两大美德(我定的).</p><ul><li><p>少用指针</p></li><li><p>少动态内存分配</p></li></ul><p>前者会导致 cache miss, 后者是相当昂贵的操作.</p><h2 id="开链"><a href="#开链" class="headerlink" title="开链"></a>开链</h2><p>A hash 到了 K, 这时 B 也 hash 到了 K, B 必须尝试新位置, 直到找到一个可用位置. 最简单的方法是 Linear Probing. K 被占了就去找 K+1, K+2... 这样有可能会导致部分的区块使用率很高, 所以一般来说用第二个或更多 hash function 来算出新位置会好点.</p><p>多次 hash 可以更好地消除原有 key 分布的特征, 使得 key 可以均匀分布在 table 上. 因为 p 为碰撞概率, t 为 hash 次数, 多次 hash 的碰撞概率就是 p^t 了.</p><p>但真正的问题在于, <strong>要怎么 look up 呢?</strong> 如果用了 10 次 hash 才将一个元素放进 table, 那么读取在最差的情况下需要 10 次 look up 才能确保元素不在这个集合内. 再多跳几次, 可能还不如直接上 O(log n) 的平衡树了呢.</p><h2 id="Cuckoo-Hashing"><a href="#Cuckoo-Hashing" class="headerlink" title="Cuckoo Hashing"></a>Cuckoo Hashing</h2><p>Cuckoo Hashing 最精妙也是唯一的改动是 kick out, <strong>将多次 hash 的 look up 压力分散到了多个 key 而非单一 key 上.</strong> A hash 到了 K, B 也 hash 到了 K, 发现已经被 A 占用了, 尝试用第二种 hash function, 将 B hash 到了 M, 发现 M 也已经被占用了. 这时可以任意将 K 或者 M 上的元素踢出来, 然后将 B 置入. 被踢出来的元素要继续尝试以上流程进行插入. 每个 key 最多存在于两个位置, 所以 look up 最多跳两次.</p><p>这种不断踢出元素的过程, 会构成一幅图叫做 Cuckoo Graph, 只有很低概率会产生死循环. 原论文给出的结论是 2 个 hash function 在 load factor 在 50% 的情况下是可靠的, 如果是用 3 个 hash function, load factor 可以进一步提升至 91%.</p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>工程实现上, 不大可能无限制 kick out. 我测试了下不同 kick 次数的表现.</p><p>代码和输出较长, 先把结果写在这边.</p><ul><li><p>预设 load factor 为 83% 时, 97% 的元素插入成功(3 hash functions + 7 max kicks)</p></li><li><p>预设 load factor 为 100% 时, 91% 的元素插入成功(3 hash functions + 8 max kicks)</p></li></ul><p>Cuckoo Hashing + 任意插入失败情况下的 backup store 就是一个非常内存节约型的 Hash Table 了!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">from random import randrange</span><br><span class="line">from hashlib import md5, sha1,sha3_256</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SimpleHashTable:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self._table = [&apos;&apos;] * 6000</span><br><span class="line"></span><br><span class="line">    def insert(self, k: str) -&gt; bool:</span><br><span class="line">        pos = hash(k) % 6000</span><br><span class="line">        if self._table[pos]:</span><br><span class="line">            return False</span><br><span class="line">        else:</span><br><span class="line">            self._table[pos] = k</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;SimpleHashTable&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TwoLayersCuckooTable:</span><br><span class="line">    def __init__(self, max_kick=1):</span><br><span class="line">        self._tables = [[&apos;&apos;] * 3000, [&apos;&apos;] * 3000]</span><br><span class="line">        self._max_kick = max_kick</span><br><span class="line"></span><br><span class="line">    def insert(self, k: str, nth_kick=0) -&gt; bool:</span><br><span class="line">        pos_0 = hash((k, 0)) % 3000</span><br><span class="line">        pos_1 = hash((k, 1)) % 3000</span><br><span class="line"></span><br><span class="line">        if not self._tables[0][pos_0]:</span><br><span class="line">            self._tables[0][pos_0] = k</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        if not self._tables[1][pos_1]:</span><br><span class="line">            self._tables[1][pos_1] = k</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        if nth_kick &lt; self._max_kick:</span><br><span class="line">            if randrange(0, 2):</span><br><span class="line">                k, self._tables[0][pos_0] = self._tables[0][pos_0], k</span><br><span class="line">            else:</span><br><span class="line">                k, self._tables[1][pos_1] = self._tables[1][pos_1], k</span><br><span class="line">            return self.insert(k, nth_kick + 1)</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;2 layers + %d kicks&apos; % self._max_kick</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ThreeLayersCuckooTable:</span><br><span class="line">    def __init__(self, max_kick=1):</span><br><span class="line">        self._tables = [[&apos;&apos;] * 2000, [&apos;&apos;] * 2000, [&apos;&apos;] * 2000]</span><br><span class="line">        self._max_kick = max_kick</span><br><span class="line"></span><br><span class="line">    def insert(self, k: str, nth_kick=0) -&gt; bool:</span><br><span class="line">        pos_0 = hash((k, 0)) % 2000</span><br><span class="line">        pos_1 = hash((k, 1)) % 2000</span><br><span class="line">        pos_2 = hash((k, 2)) % 2000</span><br><span class="line"></span><br><span class="line">        if not self._tables[0][pos_0]:</span><br><span class="line">            self._tables[0][pos_0] = k</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        if not self._tables[1][pos_1]:</span><br><span class="line">            self._tables[1][pos_1] = k</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        if not self._tables[2][pos_2]:</span><br><span class="line">            self._tables[2][pos_2] = k</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        if nth_kick &lt; self._max_kick:</span><br><span class="line">            sol = randrange(0, 3)</span><br><span class="line">            if sol == 0:</span><br><span class="line">                k, self._tables[0][pos_0] = self._tables[0][pos_0], k</span><br><span class="line">            elif sol == 1:</span><br><span class="line">                k, self._tables[1][pos_1] = self._tables[1][pos_1], k</span><br><span class="line">            else:</span><br><span class="line">                k, self._tables[2][pos_2] = self._tables[2][pos_2], k</span><br><span class="line">            return self.insert(k, nth_kick + 1)</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;3 layers + %d kicks&apos; % self._max_kick</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ThreeVLayersCuckooTable:</span><br><span class="line">    def __init__(self, max_kick=1):</span><br><span class="line">        self._table = [&apos;&apos;] * 6000</span><br><span class="line">        self._tables = [self._table] * 3</span><br><span class="line">        self._max_kick = max_kick</span><br><span class="line"></span><br><span class="line">    def insert(self, k: str, nth_kick=0) -&gt; bool:</span><br><span class="line">        pos_0 = hash(sha3_256(k.encode(&apos;ascii&apos;)).hexdigest()) % 6000</span><br><span class="line">        pos_1 = hash(md5(k.encode(&apos;ascii&apos;)).hexdigest()) % 6000</span><br><span class="line">        pos_2 = hash(sha1(k.encode(&apos;ascii&apos;)).hexdigest()) % 6000</span><br><span class="line"></span><br><span class="line">        if not self._tables[0][pos_0]:</span><br><span class="line">            self._tables[0][pos_0] = k</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        if not self._tables[1][pos_1]:</span><br><span class="line">            self._tables[1][pos_1] = k</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        if not self._tables[2][pos_2]:</span><br><span class="line">            self._tables[2][pos_2] = k</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        if nth_kick &lt; self._max_kick:</span><br><span class="line">            sol = randrange(0, 3)</span><br><span class="line">            if sol == 0:</span><br><span class="line">                k, self._tables[0][pos_0] = self._tables[0][pos_0], k</span><br><span class="line">            elif sol == 1:</span><br><span class="line">                k, self._tables[1][pos_1] = self._tables[1][pos_1], k</span><br><span class="line">            else:</span><br><span class="line">                k, self._tables[2][pos_2] = self._tables[2][pos_2], k</span><br><span class="line">            return self.insert(k, nth_kick + 1)</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;3 virtual layers + %d kicks&apos; % self._max_kick</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    def run():</span><br><span class="line">        tables = [[SimpleHashTable(), 0]]</span><br><span class="line">        for i in range(1, 10):</span><br><span class="line">            tables.append([TwoLayersCuckooTable(i), 0])</span><br><span class="line">            tables.append([ThreeLayersCuckooTable(i), 0])</span><br><span class="line">            tables.append([ThreeVLayersCuckooTable(i), 0])</span><br><span class="line"></span><br><span class="line">        for i in range(6000):</span><br><span class="line">            k = str(i)</span><br><span class="line">            for t in tables:</span><br><span class="line">                r = t[0].insert(k)</span><br><span class="line">                if r:</span><br><span class="line">                    t[1] += 1</span><br><span class="line"></span><br><span class="line">                j = i + 1</span><br><span class="line">                if j % 500 == 0:</span><br><span class="line">                    print(str(t[0]), &quot;: %d / %d = %d%%&quot; % (t[1], j, t[1] * 100 // j))</span><br><span class="line">                    if t is tables[-1]:</span><br><span class="line">                        print(&apos;---\n&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line">SimpleHashTable : 474 / 500 = 94%</span><br><span class="line">2 layers + 1 kicks : 497 / 500 = 99%</span><br><span class="line">3 layers + 1 kicks : 500 / 500 = 100%</span><br><span class="line">3 virtual layers + 1 kicks : 500 / 500 = 100%</span><br><span class="line">2 layers + 2 kicks : 497 / 500 = 99%</span><br><span class="line">3 layers + 2 kicks : 500 / 500 = 100%</span><br><span class="line">3 virtual layers + 2 kicks : 500 / 500 = 100%</span><br><span class="line">2 layers + 3 kicks : 497 / 500 = 99%</span><br><span class="line">3 layers + 3 kicks : 500 / 500 = 100%</span><br><span class="line">3 virtual layers + 3 kicks : 500 / 500 = 100%</span><br><span class="line">2 layers + 4 kicks : 497 / 500 = 99%</span><br><span class="line">3 layers + 4 kicks : 500 / 500 = 100%</span><br><span class="line">3 virtual layers + 4 kicks : 500 / 500 = 100%</span><br><span class="line">2 layers + 5 kicks : 497 / 500 = 99%</span><br><span class="line">3 layers + 5 kicks : 500 / 500 = 100%</span><br><span class="line">3 virtual layers + 5 kicks : 500 / 500 = 100%</span><br><span class="line">2 layers + 6 kicks : 497 / 500 = 99%</span><br><span class="line">3 layers + 6 kicks : 500 / 500 = 100%</span><br><span class="line">3 virtual layers + 6 kicks : 500 / 500 = 100%</span><br><span class="line">2 layers + 7 kicks : 497 / 500 = 99%</span><br><span class="line">3 layers + 7 kicks : 500 / 500 = 100%</span><br><span class="line">3 virtual layers + 7 kicks : 500 / 500 = 100%</span><br><span class="line">2 layers + 8 kicks : 497 / 500 = 99%</span><br><span class="line">3 layers + 8 kicks : 500 / 500 = 100%</span><br><span class="line">3 virtual layers + 8 kicks : 500 / 500 = 100%</span><br><span class="line">2 layers + 9 kicks : 497 / 500 = 99%</span><br><span class="line">3 layers + 9 kicks : 500 / 500 = 100%</span><br><span class="line">3 virtual layers + 9 kicks : 500 / 500 = 100%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 906 / 1000 = 90%</span><br><span class="line">2 layers + 1 kicks : 986 / 1000 = 98%</span><br><span class="line">3 layers + 1 kicks : 997 / 1000 = 99%</span><br><span class="line">3 virtual layers + 1 kicks : 1000 / 1000 = 100%</span><br><span class="line">2 layers + 2 kicks : 986 / 1000 = 98%</span><br><span class="line">3 layers + 2 kicks : 997 / 1000 = 99%</span><br><span class="line">3 virtual layers + 2 kicks : 1000 / 1000 = 100%</span><br><span class="line">2 layers + 3 kicks : 986 / 1000 = 98%</span><br><span class="line">3 layers + 3 kicks : 997 / 1000 = 99%</span><br><span class="line">3 virtual layers + 3 kicks : 1000 / 1000 = 100%</span><br><span class="line">2 layers + 4 kicks : 986 / 1000 = 98%</span><br><span class="line">3 layers + 4 kicks : 997 / 1000 = 99%</span><br><span class="line">3 virtual layers + 4 kicks : 1000 / 1000 = 100%</span><br><span class="line">2 layers + 5 kicks : 986 / 1000 = 98%</span><br><span class="line">3 layers + 5 kicks : 997 / 1000 = 99%</span><br><span class="line">3 virtual layers + 5 kicks : 1000 / 1000 = 100%</span><br><span class="line">2 layers + 6 kicks : 986 / 1000 = 98%</span><br><span class="line">3 layers + 6 kicks : 997 / 1000 = 99%</span><br><span class="line">3 virtual layers + 6 kicks : 1000 / 1000 = 100%</span><br><span class="line">2 layers + 7 kicks : 986 / 1000 = 98%</span><br><span class="line">3 layers + 7 kicks : 997 / 1000 = 99%</span><br><span class="line">3 virtual layers + 7 kicks : 1000 / 1000 = 100%</span><br><span class="line">2 layers + 8 kicks : 986 / 1000 = 98%</span><br><span class="line">3 layers + 8 kicks : 997 / 1000 = 99%</span><br><span class="line">3 virtual layers + 8 kicks : 1000 / 1000 = 100%</span><br><span class="line">2 layers + 9 kicks : 986 / 1000 = 98%</span><br><span class="line">3 layers + 9 kicks : 997 / 1000 = 99%</span><br><span class="line">3 virtual layers + 9 kicks : 1000 / 1000 = 100%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 1304 / 1500 = 86%</span><br><span class="line">2 layers + 1 kicks : 1446 / 1500 = 96%</span><br><span class="line">3 layers + 1 kicks : 1479 / 1500 = 98%</span><br><span class="line">3 virtual layers + 1 kicks : 1500 / 1500 = 100%</span><br><span class="line">2 layers + 2 kicks : 1446 / 1500 = 96%</span><br><span class="line">3 layers + 2 kicks : 1479 / 1500 = 98%</span><br><span class="line">3 virtual layers + 2 kicks : 1500 / 1500 = 100%</span><br><span class="line">2 layers + 3 kicks : 1446 / 1500 = 96%</span><br><span class="line">3 layers + 3 kicks : 1479 / 1500 = 98%</span><br><span class="line">3 virtual layers + 3 kicks : 1500 / 1500 = 100%</span><br><span class="line">2 layers + 4 kicks : 1446 / 1500 = 96%</span><br><span class="line">3 layers + 4 kicks : 1479 / 1500 = 98%</span><br><span class="line">3 virtual layers + 4 kicks : 1500 / 1500 = 100%</span><br><span class="line">2 layers + 5 kicks : 1446 / 1500 = 96%</span><br><span class="line">3 layers + 5 kicks : 1479 / 1500 = 98%</span><br><span class="line">3 virtual layers + 5 kicks : 1500 / 1500 = 100%</span><br><span class="line">2 layers + 6 kicks : 1446 / 1500 = 96%</span><br><span class="line">3 layers + 6 kicks : 1479 / 1500 = 98%</span><br><span class="line">3 virtual layers + 6 kicks : 1500 / 1500 = 100%</span><br><span class="line">2 layers + 7 kicks : 1446 / 1500 = 96%</span><br><span class="line">3 layers + 7 kicks : 1479 / 1500 = 98%</span><br><span class="line">3 virtual layers + 7 kicks : 1500 / 1500 = 100%</span><br><span class="line">2 layers + 8 kicks : 1446 / 1500 = 96%</span><br><span class="line">3 layers + 8 kicks : 1479 / 1500 = 98%</span><br><span class="line">3 virtual layers + 8 kicks : 1500 / 1500 = 100%</span><br><span class="line">2 layers + 9 kicks : 1446 / 1500 = 96%</span><br><span class="line">3 layers + 9 kicks : 1479 / 1500 = 98%</span><br><span class="line">3 virtual layers + 9 kicks : 1500 / 1500 = 100%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 1681 / 2000 = 84%</span><br><span class="line">2 layers + 1 kicks : 1892 / 2000 = 94%</span><br><span class="line">3 layers + 1 kicks : 1956 / 2000 = 97%</span><br><span class="line">3 virtual layers + 1 kicks : 1998 / 2000 = 99%</span><br><span class="line">2 layers + 2 kicks : 1892 / 2000 = 94%</span><br><span class="line">3 layers + 2 kicks : 1956 / 2000 = 97%</span><br><span class="line">3 virtual layers + 2 kicks : 1998 / 2000 = 99%</span><br><span class="line">2 layers + 3 kicks : 1892 / 2000 = 94%</span><br><span class="line">3 layers + 3 kicks : 1956 / 2000 = 97%</span><br><span class="line">3 virtual layers + 3 kicks : 1999 / 2000 = 99%</span><br><span class="line">2 layers + 4 kicks : 1892 / 2000 = 94%</span><br><span class="line">3 layers + 4 kicks : 1956 / 2000 = 97%</span><br><span class="line">3 virtual layers + 4 kicks : 2000 / 2000 = 100%</span><br><span class="line">2 layers + 5 kicks : 1892 / 2000 = 94%</span><br><span class="line">3 layers + 5 kicks : 1956 / 2000 = 97%</span><br><span class="line">3 virtual layers + 5 kicks : 2000 / 2000 = 100%</span><br><span class="line">2 layers + 6 kicks : 1892 / 2000 = 94%</span><br><span class="line">3 layers + 6 kicks : 1956 / 2000 = 97%</span><br><span class="line">3 virtual layers + 6 kicks : 2000 / 2000 = 100%</span><br><span class="line">2 layers + 7 kicks : 1892 / 2000 = 94%</span><br><span class="line">3 layers + 7 kicks : 1956 / 2000 = 97%</span><br><span class="line">3 virtual layers + 7 kicks : 2000 / 2000 = 100%</span><br><span class="line">2 layers + 8 kicks : 1892 / 2000 = 94%</span><br><span class="line">3 layers + 8 kicks : 1956 / 2000 = 97%</span><br><span class="line">3 virtual layers + 8 kicks : 2000 / 2000 = 100%</span><br><span class="line">2 layers + 9 kicks : 1892 / 2000 = 94%</span><br><span class="line">3 layers + 9 kicks : 1956 / 2000 = 97%</span><br><span class="line">3 virtual layers + 9 kicks : 2000 / 2000 = 100%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 2025 / 2500 = 81%</span><br><span class="line">2 layers + 1 kicks : 2313 / 2500 = 92%</span><br><span class="line">3 layers + 1 kicks : 2401 / 2500 = 96%</span><br><span class="line">3 virtual layers + 1 kicks : 2495 / 2500 = 99%</span><br><span class="line">2 layers + 2 kicks : 2313 / 2500 = 92%</span><br><span class="line">3 layers + 2 kicks : 2401 / 2500 = 96%</span><br><span class="line">3 virtual layers + 2 kicks : 2497 / 2500 = 99%</span><br><span class="line">2 layers + 3 kicks : 2313 / 2500 = 92%</span><br><span class="line">3 layers + 3 kicks : 2401 / 2500 = 96%</span><br><span class="line">3 virtual layers + 3 kicks : 2498 / 2500 = 99%</span><br><span class="line">2 layers + 4 kicks : 2313 / 2500 = 92%</span><br><span class="line">3 layers + 4 kicks : 2401 / 2500 = 96%</span><br><span class="line">3 virtual layers + 4 kicks : 2500 / 2500 = 100%</span><br><span class="line">2 layers + 5 kicks : 2313 / 2500 = 92%</span><br><span class="line">3 layers + 5 kicks : 2401 / 2500 = 96%</span><br><span class="line">3 virtual layers + 5 kicks : 2500 / 2500 = 100%</span><br><span class="line">2 layers + 6 kicks : 2313 / 2500 = 92%</span><br><span class="line">3 layers + 6 kicks : 2401 / 2500 = 96%</span><br><span class="line">3 virtual layers + 6 kicks : 2500 / 2500 = 100%</span><br><span class="line">2 layers + 7 kicks : 2313 / 2500 = 92%</span><br><span class="line">3 layers + 7 kicks : 2401 / 2500 = 96%</span><br><span class="line">3 virtual layers + 7 kicks : 2500 / 2500 = 100%</span><br><span class="line">2 layers + 8 kicks : 2313 / 2500 = 92%</span><br><span class="line">3 layers + 8 kicks : 2401 / 2500 = 96%</span><br><span class="line">3 virtual layers + 8 kicks : 2500 / 2500 = 100%</span><br><span class="line">2 layers + 9 kicks : 2313 / 2500 = 92%</span><br><span class="line">3 layers + 9 kicks : 2401 / 2500 = 96%</span><br><span class="line">3 virtual layers + 9 kicks : 2500 / 2500 = 100%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 2349 / 3000 = 78%</span><br><span class="line">2 layers + 1 kicks : 2703 / 3000 = 90%</span><br><span class="line">3 layers + 1 kicks : 2836 / 3000 = 94%</span><br><span class="line">3 virtual layers + 1 kicks : 2980 / 3000 = 99%</span><br><span class="line">2 layers + 2 kicks : 2703 / 3000 = 90%</span><br><span class="line">3 layers + 2 kicks : 2836 / 3000 = 94%</span><br><span class="line">3 virtual layers + 2 kicks : 2986 / 3000 = 99%</span><br><span class="line">2 layers + 3 kicks : 2703 / 3000 = 90%</span><br><span class="line">3 layers + 3 kicks : 2836 / 3000 = 94%</span><br><span class="line">3 virtual layers + 3 kicks : 2992 / 3000 = 99%</span><br><span class="line">2 layers + 4 kicks : 2703 / 3000 = 90%</span><br><span class="line">3 layers + 4 kicks : 2836 / 3000 = 94%</span><br><span class="line">3 virtual layers + 4 kicks : 2996 / 3000 = 99%</span><br><span class="line">2 layers + 5 kicks : 2703 / 3000 = 90%</span><br><span class="line">3 layers + 5 kicks : 2836 / 3000 = 94%</span><br><span class="line">3 virtual layers + 5 kicks : 2996 / 3000 = 99%</span><br><span class="line">2 layers + 6 kicks : 2703 / 3000 = 90%</span><br><span class="line">3 layers + 6 kicks : 2836 / 3000 = 94%</span><br><span class="line">3 virtual layers + 6 kicks : 3000 / 3000 = 100%</span><br><span class="line">2 layers + 7 kicks : 2703 / 3000 = 90%</span><br><span class="line">3 layers + 7 kicks : 2836 / 3000 = 94%</span><br><span class="line">3 virtual layers + 7 kicks : 2999 / 3000 = 99%</span><br><span class="line">2 layers + 8 kicks : 2703 / 3000 = 90%</span><br><span class="line">3 layers + 8 kicks : 2836 / 3000 = 94%</span><br><span class="line">3 virtual layers + 8 kicks : 2999 / 3000 = 99%</span><br><span class="line">2 layers + 9 kicks : 2703 / 3000 = 90%</span><br><span class="line">3 layers + 9 kicks : 2836 / 3000 = 94%</span><br><span class="line">3 virtual layers + 9 kicks : 2999 / 3000 = 99%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 2649 / 3500 = 75%</span><br><span class="line">2 layers + 1 kicks : 3088 / 3500 = 88%</span><br><span class="line">3 layers + 1 kicks : 3244 / 3500 = 92%</span><br><span class="line">3 virtual layers + 1 kicks : 3440 / 3500 = 98%</span><br><span class="line">2 layers + 2 kicks : 3088 / 3500 = 88%</span><br><span class="line">3 layers + 2 kicks : 3244 / 3500 = 92%</span><br><span class="line">3 virtual layers + 2 kicks : 3460 / 3500 = 98%</span><br><span class="line">2 layers + 3 kicks : 3088 / 3500 = 88%</span><br><span class="line">3 layers + 3 kicks : 3244 / 3500 = 92%</span><br><span class="line">3 virtual layers + 3 kicks : 3469 / 3500 = 99%</span><br><span class="line">2 layers + 4 kicks : 3088 / 3500 = 88%</span><br><span class="line">3 layers + 4 kicks : 3244 / 3500 = 92%</span><br><span class="line">3 virtual layers + 4 kicks : 3486 / 3500 = 99%</span><br><span class="line">2 layers + 5 kicks : 3088 / 3500 = 88%</span><br><span class="line">3 layers + 5 kicks : 3244 / 3500 = 92%</span><br><span class="line">3 virtual layers + 5 kicks : 3490 / 3500 = 99%</span><br><span class="line">2 layers + 6 kicks : 3088 / 3500 = 88%</span><br><span class="line">3 layers + 6 kicks : 3244 / 3500 = 92%</span><br><span class="line">3 virtual layers + 6 kicks : 3496 / 3500 = 99%</span><br><span class="line">2 layers + 7 kicks : 3088 / 3500 = 88%</span><br><span class="line">3 layers + 7 kicks : 3244 / 3500 = 92%</span><br><span class="line">3 virtual layers + 7 kicks : 3495 / 3500 = 99%</span><br><span class="line">2 layers + 8 kicks : 3088 / 3500 = 88%</span><br><span class="line">3 layers + 8 kicks : 3244 / 3500 = 92%</span><br><span class="line">3 virtual layers + 8 kicks : 3494 / 3500 = 99%</span><br><span class="line">2 layers + 9 kicks : 3088 / 3500 = 88%</span><br><span class="line">3 layers + 9 kicks : 3244 / 3500 = 92%</span><br><span class="line">3 virtual layers + 9 kicks : 3496 / 3500 = 99%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 2927 / 4000 = 73%</span><br><span class="line">2 layers + 1 kicks : 3401 / 4000 = 85%</span><br><span class="line">3 layers + 1 kicks : 3607 / 4000 = 90%</span><br><span class="line">3 virtual layers + 1 kicks : 3883 / 4000 = 97%</span><br><span class="line">2 layers + 2 kicks : 3401 / 4000 = 85%</span><br><span class="line">3 layers + 2 kicks : 3607 / 4000 = 90%</span><br><span class="line">3 virtual layers + 2 kicks : 3920 / 4000 = 98%</span><br><span class="line">2 layers + 3 kicks : 3401 / 4000 = 85%</span><br><span class="line">3 layers + 3 kicks : 3607 / 4000 = 90%</span><br><span class="line">3 virtual layers + 3 kicks : 3943 / 4000 = 98%</span><br><span class="line">2 layers + 4 kicks : 3401 / 4000 = 85%</span><br><span class="line">3 layers + 4 kicks : 3607 / 4000 = 90%</span><br><span class="line">3 virtual layers + 4 kicks : 3961 / 4000 = 99%</span><br><span class="line">2 layers + 5 kicks : 3401 / 4000 = 85%</span><br><span class="line">3 layers + 5 kicks : 3607 / 4000 = 90%</span><br><span class="line">3 virtual layers + 5 kicks : 3972 / 4000 = 99%</span><br><span class="line">2 layers + 6 kicks : 3401 / 4000 = 85%</span><br><span class="line">3 layers + 6 kicks : 3607 / 4000 = 90%</span><br><span class="line">3 virtual layers + 6 kicks : 3982 / 4000 = 99%</span><br><span class="line">2 layers + 7 kicks : 3401 / 4000 = 85%</span><br><span class="line">3 layers + 7 kicks : 3607 / 4000 = 90%</span><br><span class="line">3 virtual layers + 7 kicks : 3988 / 4000 = 99%</span><br><span class="line">2 layers + 8 kicks : 3401 / 4000 = 85%</span><br><span class="line">3 layers + 8 kicks : 3607 / 4000 = 90%</span><br><span class="line">3 virtual layers + 8 kicks : 3988 / 4000 = 99%</span><br><span class="line">2 layers + 9 kicks : 3401 / 4000 = 85%</span><br><span class="line">3 layers + 9 kicks : 3607 / 4000 = 90%</span><br><span class="line">3 virtual layers + 9 kicks : 3984 / 4000 = 99%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 3172 / 4500 = 70%</span><br><span class="line">2 layers + 1 kicks : 3709 / 4500 = 82%</span><br><span class="line">3 layers + 1 kicks : 3932 / 4500 = 87%</span><br><span class="line">3 virtual layers + 1 kicks : 4280 / 4500 = 95%</span><br><span class="line">2 layers + 2 kicks : 3709 / 4500 = 82%</span><br><span class="line">3 layers + 2 kicks : 3932 / 4500 = 87%</span><br><span class="line">3 virtual layers + 2 kicks : 4342 / 4500 = 96%</span><br><span class="line">2 layers + 3 kicks : 3709 / 4500 = 82%</span><br><span class="line">3 layers + 3 kicks : 3932 / 4500 = 87%</span><br><span class="line">3 virtual layers + 3 kicks : 4382 / 4500 = 97%</span><br><span class="line">2 layers + 4 kicks : 3709 / 4500 = 82%</span><br><span class="line">3 layers + 4 kicks : 3932 / 4500 = 87%</span><br><span class="line">3 virtual layers + 4 kicks : 4400 / 4500 = 97%</span><br><span class="line">2 layers + 5 kicks : 3709 / 4500 = 82%</span><br><span class="line">3 layers + 5 kicks : 3932 / 4500 = 87%</span><br><span class="line">3 virtual layers + 5 kicks : 4426 / 4500 = 98%</span><br><span class="line">2 layers + 6 kicks : 3709 / 4500 = 82%</span><br><span class="line">3 layers + 6 kicks : 3932 / 4500 = 87%</span><br><span class="line">3 virtual layers + 6 kicks : 4438 / 4500 = 98%</span><br><span class="line">2 layers + 7 kicks : 3709 / 4500 = 82%</span><br><span class="line">3 layers + 7 kicks : 3932 / 4500 = 87%</span><br><span class="line">3 virtual layers + 7 kicks : 4460 / 4500 = 99%</span><br><span class="line">2 layers + 8 kicks : 3709 / 4500 = 82%</span><br><span class="line">3 layers + 8 kicks : 3932 / 4500 = 87%</span><br><span class="line">3 virtual layers + 8 kicks : 4450 / 4500 = 98%</span><br><span class="line">2 layers + 9 kicks : 3709 / 4500 = 82%</span><br><span class="line">3 layers + 9 kicks : 3932 / 4500 = 87%</span><br><span class="line">3 virtual layers + 9 kicks : 4453 / 4500 = 98%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 3399 / 5000 = 67%</span><br><span class="line">2 layers + 1 kicks : 3971 / 5000 = 79%</span><br><span class="line">3 layers + 1 kicks : 4221 / 5000 = 84%</span><br><span class="line">3 virtual layers + 1 kicks : 4628 / 5000 = 92%</span><br><span class="line">2 layers + 2 kicks : 3971 / 5000 = 79%</span><br><span class="line">3 layers + 2 kicks : 4221 / 5000 = 84%</span><br><span class="line">3 virtual layers + 2 kicks : 4715 / 5000 = 94%</span><br><span class="line">2 layers + 3 kicks : 3971 / 5000 = 79%</span><br><span class="line">3 layers + 3 kicks : 4221 / 5000 = 84%</span><br><span class="line">3 virtual layers + 3 kicks : 4773 / 5000 = 95%</span><br><span class="line">2 layers + 4 kicks : 3971 / 5000 = 79%</span><br><span class="line">3 layers + 4 kicks : 4221 / 5000 = 84%</span><br><span class="line">3 virtual layers + 4 kicks : 4793 / 5000 = 95%</span><br><span class="line">2 layers + 5 kicks : 3971 / 5000 = 79%</span><br><span class="line">3 layers + 5 kicks : 4221 / 5000 = 84%</span><br><span class="line">3 virtual layers + 5 kicks : 4809 / 5000 = 96%</span><br><span class="line">2 layers + 6 kicks : 3971 / 5000 = 79%</span><br><span class="line">3 layers + 6 kicks : 4221 / 5000 = 84%</span><br><span class="line">3 virtual layers + 6 kicks : 4839 / 5000 = 96%</span><br><span class="line">2 layers + 7 kicks : 3971 / 5000 = 79%</span><br><span class="line">3 layers + 7 kicks : 4221 / 5000 = 84%</span><br><span class="line">3 virtual layers + 7 kicks : 4856 / 5000 = 97%</span><br><span class="line">2 layers + 8 kicks : 3971 / 5000 = 79%</span><br><span class="line">3 layers + 8 kicks : 4221 / 5000 = 84%</span><br><span class="line">3 virtual layers + 8 kicks : 4858 / 5000 = 97%</span><br><span class="line">2 layers + 9 kicks : 3971 / 5000 = 79%</span><br><span class="line">3 layers + 9 kicks : 4221 / 5000 = 84%</span><br><span class="line">3 virtual layers + 9 kicks : 4873 / 5000 = 97%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 3586 / 5500 = 65%</span><br><span class="line">2 layers + 1 kicks : 4220 / 5500 = 76%</span><br><span class="line">3 layers + 1 kicks : 4459 / 5500 = 81%</span><br><span class="line">3 virtual layers + 1 kicks : 4928 / 5500 = 89%</span><br><span class="line">2 layers + 2 kicks : 4220 / 5500 = 76%</span><br><span class="line">3 layers + 2 kicks : 4459 / 5500 = 81%</span><br><span class="line">3 virtual layers + 2 kicks : 5022 / 5500 = 91%</span><br><span class="line">2 layers + 3 kicks : 4220 / 5500 = 76%</span><br><span class="line">3 layers + 3 kicks : 4459 / 5500 = 81%</span><br><span class="line">3 virtual layers + 3 kicks : 5085 / 5500 = 92%</span><br><span class="line">2 layers + 4 kicks : 4220 / 5500 = 76%</span><br><span class="line">3 layers + 4 kicks : 4459 / 5500 = 81%</span><br><span class="line">3 virtual layers + 4 kicks : 5121 / 5500 = 93%</span><br><span class="line">2 layers + 5 kicks : 4220 / 5500 = 76%</span><br><span class="line">3 layers + 5 kicks : 4459 / 5500 = 81%</span><br><span class="line">3 virtual layers + 5 kicks : 5133 / 5500 = 93%</span><br><span class="line">2 layers + 6 kicks : 4220 / 5500 = 76%</span><br><span class="line">3 layers + 6 kicks : 4459 / 5500 = 81%</span><br><span class="line">3 virtual layers + 6 kicks : 5155 / 5500 = 93%</span><br><span class="line">2 layers + 7 kicks : 4220 / 5500 = 76%</span><br><span class="line">3 layers + 7 kicks : 4459 / 5500 = 81%</span><br><span class="line">3 virtual layers + 7 kicks : 5192 / 5500 = 94%</span><br><span class="line">2 layers + 8 kicks : 4220 / 5500 = 76%</span><br><span class="line">3 layers + 8 kicks : 4459 / 5500 = 81%</span><br><span class="line">3 virtual layers + 8 kicks : 5189 / 5500 = 94%</span><br><span class="line">2 layers + 9 kicks : 4220 / 5500 = 76%</span><br><span class="line">3 layers + 9 kicks : 4459 / 5500 = 81%</span><br><span class="line">3 virtual layers + 9 kicks : 5207 / 5500 = 94%</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">SimpleHashTable : 3773 / 6000 = 62%</span><br><span class="line">2 layers + 1 kicks : 4428 / 6000 = 73%</span><br><span class="line">3 layers + 1 kicks : 4692 / 6000 = 78%</span><br><span class="line">3 virtual layers + 1 kicks : 5199 / 6000 = 86%</span><br><span class="line">2 layers + 2 kicks : 4428 / 6000 = 73%</span><br><span class="line">3 layers + 2 kicks : 4692 / 6000 = 78%</span><br><span class="line">3 virtual layers + 2 kicks : 5272 / 6000 = 87%</span><br><span class="line">2 layers + 3 kicks : 4428 / 6000 = 73%</span><br><span class="line">3 layers + 3 kicks : 4692 / 6000 = 78%</span><br><span class="line">3 virtual layers + 3 kicks : 5353 / 6000 = 89%</span><br><span class="line">2 layers + 4 kicks : 4428 / 6000 = 73%</span><br><span class="line">3 layers + 4 kicks : 4692 / 6000 = 78%</span><br><span class="line">3 virtual layers + 4 kicks : 5379 / 6000 = 89%</span><br><span class="line">2 layers + 5 kicks : 4428 / 6000 = 73%</span><br><span class="line">3 layers + 5 kicks : 4692 / 6000 = 78%</span><br><span class="line">3 virtual layers + 5 kicks : 5397 / 6000 = 89%</span><br><span class="line">2 layers + 6 kicks : 4428 / 6000 = 73%</span><br><span class="line">3 layers + 6 kicks : 4692 / 6000 = 78%</span><br><span class="line">3 virtual layers + 6 kicks : 5423 / 6000 = 90%</span><br><span class="line">2 layers + 7 kicks : 4428 / 6000 = 73%</span><br><span class="line">3 layers + 7 kicks : 4692 / 6000 = 78%</span><br><span class="line">3 virtual layers + 7 kicks : 5458 / 6000 = 90%</span><br><span class="line">2 layers + 8 kicks : 4428 / 6000 = 73%</span><br><span class="line">3 layers + 8 kicks : 4692 / 6000 = 78%</span><br><span class="line">3 virtual layers + 8 kicks : 5473 / 6000 = 91%</span><br><span class="line">2 layers + 9 kicks : 4428 / 6000 = 73%</span><br><span class="line">3 layers + 9 kicks : 4692 / 6000 = 78%</span><br><span class="line">3 virtual layers + 9 kicks : 5483 / 6000 = 91%</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hash Table 可能是最简单也性能最高的数据结构了. 但它有个问题叫做 Hash Collision(哈希碰撞). JVM 和 C++ STL 的做法是链表 Bucket, 还有个流派是 Open Addressing(开链). Cuckoo Hashing 是一种特殊的开链.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最近的这一年</title>
    <link href="/2019/04/05/%E6%9C%80%E8%BF%91%E7%9A%84%E8%BF%99%E4%B8%80%E5%B9%B4/"/>
    <id>/2019/04/05/最近的这一年/</id>
    <published>2019-04-05T07:33:29.000Z</published>
    <updated>2019-04-14T18:41:04.829Z</updated>
    
    <content type="html"><![CDATA[<p>最近的这一年对我来说是非常神奇的一年. 大概有这么几件事.</p><ul><li><p>自立</p></li><li><p>加入了某站的在线存储组</p></li></ul><p>突然写 blog 是受了阿米老师的启发, Ta 每个月都会写总结, 看了什么, 学了什么. 在程序性能调优领域, 有句至理名言是&quot;If you cannot measure, you cannot optimize.&quot;. 我希望我遇到的这两件事不仅仅是写在这里当流水账, 也可以对我和正在读这篇文章的有缘人有益.</p><a id="more"></a><h2 id="自立"><a href="#自立" class="headerlink" title="自立"></a>自立</h2><p>自立真的是一件特别爽的事情! 以往和父母有争执, 无论谁对谁错, 当然了, 从传统孝的角度出发, 做子女都应该先认错, 但最后往往真正的原因都是口袋没钱了 / 肚子饿了 / 没地方去了, 乖乖地灰溜溜跑回家. 人望和平, 当备武力. 自立就是给了你一个核按钮(慎用)...</p><p>中国父母往往其实也挺看重独立的. 我爸小时候还经常批评我, 工作之后, 就只有问我工作累不累, 要多出去走走了. 我能有份正经工作, 没有不良嗜好, 身体没有病, 大富大贵看机遇, 小康生活应该是有了.</p><p>所以啊, 还在上学的小朋友们, 和父母吵架了, 能忍就忍吧. 反正你还是要吃饭的... 父母也不能说你一辈子. 上学买不起的东西, 那就工作了再买.</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>我在存储组干了半年多了, 名义上是 DevOps, 其实工作内容更多的是运维和客服, 兼职写些监控和脚本. 各路大佬都曾经说过 Ta 们的公司离破产只有很短的时间(30 天 ~ 3 个月). 我从我日常工作得出的结论是我离失业也只有 30 天.</p><p>我供职的公司对外宣布的用户数是一亿, 不小了吧? 从估值上看已经是大独角兽了. 但就架构来看, 开源全家桶完全 hold 得住. 那为什么不直接上云? 我维护的组件和 XX 云维护的组件有差别吗?</p><p>事实上, IaaS 应该已经很普遍了. 我司还有据我所知摩拜也是腾讯黑石服务器, 路由, 网络等硬件基础设施由云服务商提供. 逻辑还是一样的, A 司雇的小工装出来的服务器和 XX 云配的是没有差的, 上层跑得都是 Linux, 除非硬件配置不同. 云厂商却可以做到派人 24 小时值守, 动态退机器.</p><p>那么下一步是不是可以直接用云厂商的 MySQL, Kafka, Redis? 这也就是 SaaS 了. 我看新闻, Aurora 是 AWS 有史以来增长最快的云服务. 云绝对是一个铁杆庄稼, 只要啃得下去. 这个商业逻辑傻子也看得出来. 唯一的拦路虎只有价格, 但价格是会降的. 软件的边际成本接近于 0.</p><p>那么做业务是不是就高枕无忧呢? 相对来说, 虽然业务系统门槛低, 但需要的 Domain Knowledges 多, 确实不容易被替代. 现在又有了 AWS Lambda, 所谓 FaaS, 做业务系统的门槛进一步降低...</p><p>我对自身的规划是一定要往深里钻, 不要做在舒适区里摸鱼的运维. 既然基础设施迟早要定于云, 那我就要能做到给云提供基础设施!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的这一年对我来说是非常神奇的一年. 大概有这么几件事.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自立&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加入了某站的在线存储组&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;突然写 blog 是受了阿米老师的启发, Ta 每个月都会写总结, 看了什么, 学了什么. 在程序性能调优领域, 有句至理名言是&amp;quot;If you cannot measure, you cannot optimize.&amp;quot;. 我希望我遇到的这两件事不仅仅是写在这里当流水账, 也可以对我和正在读这篇文章的有缘人有益.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
